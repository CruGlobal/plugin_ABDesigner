version: "3.9"

volumes:
  config:
  files:
  mysql_config:
  mysql_data:
  mysql_key:
  mysql_password:
  nginx_etc:
  redis_data:

services:

  #nginx setup
  web:
    image: digiserve/ab-web:develop
    volumes:
      - type: bind
        source: ./nginx/html
        target: /usr/share/nginx/html
      - nginx_etc:/etc
      - files:/data
    depends_on:
      - api_sails
     #/nginx


  #db: use Maria DB as our backend DB
  db:
    image: mariadb
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /secret/password
    volumes:
      - mysql_config:/etc/mysql/conf.d
      - mysql_data:/var/lib/mysql
      - mysql_key:/key
      - mysql_password:/secret
    # on windows: use this command. (be sure to clear out mysql/data folder)
    # command: mysqld --innodb-flush-method=littlesync --innodb-use-native-aio=OFF --log_bin=ON
    ######
    # when there is a problem with : Error: ER_CRASHED_ON_USAGE: Table 'AAAAAA' is marked as crashed and should be repaired
    # this can happen with the alter table algorithm: try the safest(and slowest) COPY
    command: ["mysqld", "--alter-algorithm=copy"]
  #/db


  #redis: use redis to allow cote services to find each other across a swarm
  redis:
    image: redis
    ## NOTE: don't expose the service to the outside for security:
    ## if you do expose it, then set a password.
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
  #/redis


  #config: simply exists to pull in the config/local.js into our config volume
  config:
    image: digiserve/ab-config:develop
    volumes:
      - type: bind
        source: ./config/local.js
        target: /config_safe/local.js
      - config:/config
    working_dir: /app
    command: ["node", "app.js"]
  #/config


  #api_sails: our API end point
  api_sails:
    image: digiserve/ab-api-sails:develop
    environment:
      - COTE_DISCOVERY_REDIS_HOST=redis
    volumes:
      - config:/app/config
      - files:/data
    depends_on:
      - redis
      - config
  #/api_sails


  #appbuilder: (AppBuilder) A multi-tenant aware service to process our AppBuilder requests.
  appbuilder:
    image: digiserve/ab-appbuilder:develop
    environment:
      - COTE_DISCOVERY_REDIS_HOST=redis
    volumes:
      - config:/app/config
    depends_on:
      - redis
      - config
  #/appbuilder


  #bot_manager: our #slack bot service
  bot_manager:
    image: digiserve/ab-bot-manager:develop
    environment:
      - COTE_DISCOVERY_REDIS_HOST=redis
    volumes:
      - config:/app/config
      # sharing .sock files currently don't work on docker-for-mac:
      # https://github.com/docker/for-mac/issues/483
      # For a Mac host, configure config/local.js to hostConnection.tcp
      # but it doesn't hurt to include the /tmp dir for all platforms.
      - type: bind
        source: /tmp
        target: /tmp
    depends_on:
      - redis
      - config
  #/bot_manager


  # custom_reports: A microservice for managing custom reports
  custom_reports:
    image: digiserve/ab-custom-reports:develop
    environment:
      - COTE_DISCOVERY_REDIS_HOST=redis
    volumes:
      - config:/app/config
    depends_on:
      - redis
      - config
  #/custom_reports


  #definition_manager: (AppBuilder) A service to manage the definitions for a running AppBuilder platform.
  definition_manager:
    image: digiserve/ab-definition-manager:develop
    environment:
      - COTE_DISCOVERY_REDIS_HOST=redis
    volumes:
      - config:/app/config
    depends_on:
      - redis
      - config
  #/definition_manager


  #file_processor: A service to manage uploaded files.
  file_processor:
    image: digiserve/ab-file-processor:develop
    environment:
      - COTE_DISCOVERY_REDIS_HOST=redis
    volumes:
      - config:/app/config
      - files:/data
    depends_on:
      - redis
      - config
  #/file_processor


  #log_manager: (AppBuilder) A log manager for various AB operations
  log_manager:
    image: digiserve/ab-log-manager:develop
    environment:
      - COTE_DISCOVERY_REDIS_HOST=redis
    volumes:
      - config:/app/config
    depends_on:
      - redis
      - config
  #/log_manager


  #notification_email: an smtp email service
  notification_email:
    image: digiserve/ab-notification-email:develop
    environment:
      - COTE_DISCOVERY_REDIS_HOST=redis
    volumes:
      - config:/app/config
    depends_on:
      - redis
      - config
  #/notification_email


  #process_manager: (AppBuilder) a micro service to manage our process tasks
  process_manager:
    image: digiserve/ab-process-manager:develop
    environment:
      - COTE_DISCOVERY_REDIS_HOST=redis
    volumes:
      - config:/app/config
    depends_on:
      - redis
      - config
  #/process_manager


  #relay: (Appbuilder} A service to handle the communications with our relay server.
  relay:
    image: digiserve/ab-relay:develop
    environment:
     - COTE_DISCOVERY_REDIS_HOST=redis
    hostname: relay
    volumes:
      - config:/app/config
    depends_on:
      - redis
      - config
  #/relay


  #tenant_manager: (AppBuilder) A service to manage the site's tenants
  tenant_manager:
    image: digiserve/ab-tenant-manager:develop
    environment:
      - COTE_DISCOVERY_REDIS_HOST=redis
    volumes:
      - config:/app/config
    depends_on:
      - redis
      - config
  #/tenant_manager


  #user_manager: (AppBuilder) A microservice for managing Users
  user_manager:
    image: digiserve/ab-user-manager:develop
    environment:
      - COTE_DISCOVERY_REDIS_HOST=redis
    volumes:
      - config:/app/config
    depends_on:
      - redis
      - config
  #/user_manager


#  #watchtower: monitor and update our running containers
#  watchtower:
#    image: v2tec/watchtower
#    volumes:
#      # - /var/run/docker.sock:/var/run/docker.sock
#      - type: bind
#        source: /var/run/docker.sock
#        target: /var/run/docker.sock
#    command: --interval 10 --debug
#  #/watchtower
