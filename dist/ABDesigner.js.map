{"version":3,"file":"ABDesigner.js","mappings":";;;;;;;;;;;;;;;AAAyD;;AAEzD,6BAAe,oCAAU;AACzB,kBAAkB,qEAAe;;AAEjC;AACA;AACA;AACA,UAAU,QAAQ;AAClB;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;;;;;;;;;;AC9BA;;;;;;;;;;;ACAA;AACA;AACA;AACA;;;;;;;;;;;ACHA;AACA;AACA;AACA;;AAEA;AACA,IAAI,SAAS,qBAAqB,YAAY;AAC9C;;AAEA,YAAY,mBAAO,CAAC,mCAAS;;AAE7B;;;;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,SAAS;AACrB;;AAEA,6BAAe,oCAAU;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB,GAAG;AACxB,qBAAqB,GAAG;AACxB,qBAAqB,GAAG;AACxB,wBAAwB,GAAG;AAC3B,2BAA2B,GAAG;AAC9B,wBAAwB,GAAG;AAC3B,UAAU;AACV;;AAEA,iBAAiB;AACjB;AACA,qBAAqB;AACrB,UAAU;AACV;AACA,qBAAqB;AACrB,UAAU;;AAEV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,SAAS,GAAG,KAAK;AAC9D;AACA,qCAAqC;AACrC,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,SAAS,GAAG,QAAQ;AAC9D;AACA,kCAAkC;AAClC,+BAA+B;AAC/B,4BAA4B;AAC5B,yBAAyB;AACzB;AACA;AACA;AACA,sBAAsB;AACtB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,YAAY,GAAG,KAAK;AACjE;AACA,qCAAqC;AACrC,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,YAAY,GAAG,QAAQ;AACjE;AACA,kCAAkC;AAClC,+BAA+B;AAC/B,4BAA4B;AAC5B,yBAAyB;AACzB;AACA;AACA;AACA,sBAAsB;AACtB;AACA,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;;AAEA;AACA,uDAAuD,eAAe;AACtE;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;ACrOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE+C;AAC/C;;AAEA,6BAAe,oCAAU;AACzB,sBAAsB,yDAAiB;AACvC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,aAAa;AACb,UAAU;AACV;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AClGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEsD;AACA;;AAEtD,6BAAe,oCAAU;AACzB,mBAAmB,2DAAsB;AACzC,mBAAmB,2DAAsB;;AAEzC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC7DA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAC6G;;AAE7G,6BAAe,oCAAU;AACzB;AACA;AACA;AACA;AACA,iCAAiC,mGAAqC;;AAEtE;AACA;;AAEA;AACA;AACA;AACA;AACA,yBAAyB,KAAK;AAC9B,qBAAqB,KAAK;AAC1B,sCAAsC,KAAK;AAC3C,wCAAwC,KAAK;;AAE7C,2BAA2B,KAAK;AAChC,8BAA8B,KAAK;AACnC,qCAAqC,KAAK;AAC1C,mCAAmC,KAAK;AACxC,0CAA0C,KAAK;AAC/C,UAAU;;AAEV;AACA,aAAa,eAAe;AAC5B;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C,wCAAwC;AACxC,qCAAqC;AACrC,sCAAsC,8BAA8B;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C,wCAAwC;AACxC,qCAAqC;AACrC,sCAAsC,8BAA8B;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C,wCAAwC;AACxC,qCAAqC;AACrC,sCAAsC,8BAA8B;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD,iDAAiD;AACjD,8CAA8C;AAC9C;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,uBAAuB;AACnE;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA,8CAA8C;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA,gEAAgE,KAAK;AACrE;AACA,8CAA8C;AAC9C,2CAA2C;AAC3C;AACA;AACA,2CAA2C;AAC3C,wCAAwC;AACxC,qCAAqC;AACrC,sCAAsC,8BAA8B;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C,wCAAwC;AACxC,qCAAqC;AACrC,sCAAsC,8BAA8B;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C,4CAA4C;AAC5C;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C,wCAAwC;AACxC,qCAAqC;AACrC,sCAAsC,8BAA8B;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C,4CAA4C;AAC5C;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,sCAAsC,8BAA8B;AACpE;AACA;AACA;AACA,4CAA4C,iBAAiB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD,8CAA8C;AAC9C,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA,iDAAiD;AACjD,8CAA8C;AAC9C,2CAA2C;AAC3C;AACA,qCAAqC;AACrC;AACA,+BAA+B;AAC/B;AACA;AACA,+BAA+B;AAC/B;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,mBAAmB;AACnB;AACA,aAAa;AACb;AACA,QAAQ;;AAER;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,KAAK;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,GAAG;AAC5B,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX;AACA;AACA,wCAAwC,EAAE;AAC1C,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,eAAe;AAChC;AACA;AACA;AACA,aAAa,MAAM;AACnB;;AAEA;AACA,aAAa,MAAM;AACnB;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,yBAAyB,GAAG;AAC5B,aAAa;AACb,WAAW;AACX;AACA;AACA,wCAAwC,EAAE;AAC1C,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,EAAE;AAClC;AACA;AACA,yBAAyB;AACzB;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,cAAc;AACjD;;AAEA;AACA;AACA;AACA,iBAAiB,eAAe;AAChC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;AACA;AACA;AACA,uEAAuE;AACvE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,oCAAoC;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,oCAAoC,EAAE;AACtC,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB,kBAAkB,SAAS;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;AACA,iCAAiC,cAAc;;AAE/C;AACA,qBAAqB;AACrB,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,aAAa;AACb,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,eAAe;AAChC,kBAAkB,WAAW,WAAW,YAAY;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;;AAEnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,sBAAsB;AACtB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,mBAAmB;AACnB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,GAAG;;AAEnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,gBAAgB;;AAEhB;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;;AAEb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sEAAsE,wBAAwB;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,iBAAiB;;AAEjB;AACA;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;AC7qCA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEoE;;AAEpE,6BAAe,oCAAU;AACzB;AACA;;AAEA;AACA;AACA;AACA;;AAEA,+BAA+B,oEAA2B;;AAE1D;AACA;AACA;AACA;AACA,yBAAyB,KAAK;;AAE9B;AACA;AACA,2CAA2C,OAAO;AAClD,yBAAyB,OAAO;AAChC,yBAAyB,OAAO;AAChC,qBAAqB,KAAK;AAC1B;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,2BAA2B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,+BAA+B;AAC/B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,+BAA+B;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D,+BAA+B;AAC/B;AACA;AACA;AACA,kCAAkC;AAClC,+BAA+B;AAC/B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA,wCAAwC,KAAK;AAC7C,kDAAkD,KAAK;AACvD,kDAAkD,QAAQ;AAC1D,kDAAkD,KAAK;AACvD,oDAAoD,QAAQ;AAC5D,kDAAkD;AAClD;AACA,uDAAuD,MAAM;AAC7D,2DAA2D;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA,kCAAkC;AAClC,+BAA+B;AAC/B,4BAA4B;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,kCAAkC;AAClC,+BAA+B;AAC/B,4BAA4B;AAC5B;AACA,sBAAsB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yFAAyF,OAAO;AAChG,4BAA4B;AAC5B;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA,sBAAsB;AACtB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;;AAEA;AACA,aAAa,aAAa;;AAE1B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,uCAAuC,EAAE;AACzC,wDAAwD,EAAE;AAC1D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,GAAG;AAC3C;AACA;AACA,4BAA4B;AAC5B,0BAA0B;AAC1B;AACA;AACA,oEAAoE,EAAE;AACtE;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,sBAAsB;AACtB,mBAAmB;AACnB;;AAEA;AACA;AACA;AACA,2CAA2C,eAAe;AAC1D;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;;AAEA;AACA;AACA;;AAEA;AACA;AACA,gEAAgE,cAAc;AAC9E;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,iBAAiB;AAC9C;;AAEA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,aAAa,sBAAsB;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,OAAO,KAAK,gBAAgB;AAC/C,kCAAkC,QAAQ;AAC1C,+BAA+B,KAAK;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,sBAAsB;AAC5D;AACA,UAAU,GAAG,YAAY;AACzB,6CAA6C,sBAAsB;AACnE;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACpjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAAe,oCAAU;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,EAAE;AACnD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,OAAO,QAAQ,UAAU;AACrD,4BAA4B,OAAO,QAAQ,UAAU;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;;AAEA;AACA;;AAEA,mEAAmE;;AAEnE;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,sBAAsB,QAAQ;AAC9B,sBAAsB,QAAQ;AAC9B,wBAAwB,QAAQ;AAChC;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,gCAAgC;AACxD,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;UChMA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;ACN+C;AACO;AACV;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,+DAAkB;;AAEzC,oCAAoC;AACpC;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,gBAAgB,4DAAW;AAC3B,OAAO;AACP;AACA,gBAAgB,8DAAM,UAAU,iEAAS;AACzC,OAAO;AACP,IAAI;AACJ","sources":["webpack://abdesigner/./src/application.js","webpack://abdesigner/./src/definitions.js","webpack://abdesigner/./src/labels/en.js","webpack://abdesigner/./src/labels/labels.js","webpack://abdesigner/./src/rootPages/Designer/forms/process/ABProcessParticipant_selectManagersUI.js","webpack://abdesigner/./src/rootPages/Designer/ui.js","webpack://abdesigner/./src/rootPages/Designer/ui_choose.js","webpack://abdesigner/./src/rootPages/Designer/ui_choose_form.js","webpack://abdesigner/./src/rootPages/Designer/ui_choose_list.js","webpack://abdesigner/./src/rootPages/Designer/ui_common_popupEditMenu.js","webpack://abdesigner/webpack/bootstrap","webpack://abdesigner/webpack/runtime/compat get default export","webpack://abdesigner/webpack/runtime/define property getters","webpack://abdesigner/webpack/runtime/hasOwnProperty shorthand","webpack://abdesigner/webpack/runtime/make namespace object","webpack://abdesigner/./index.js"],"sourcesContent":["import DesignerFactory from \"./rootPages/Designer/ui.js\";\n\nexport default function (AB) {\n   var Designer = DesignerFactory(AB);\n\n   var application = {\n      id: \"ABDesigner\",\n      label: \"AB Designer\", // How to get Multilingual?\n      // {string} the AB.Multilingual.Label(Key)\n      isPlugin: true,\n\n      pages: function () {\n         // Return the Root Pages required to\n         return this._pages;\n      },\n      _pages: [Designer],\n      // init: function (AB) {\n      //    debugger;\n      //    this._pages.forEach((p) => {\n      //       p.init(AB);\n      //    });\n      // },\n      datacollectionsIncluded: () => {\n         // return [];\n         var myDCs = [];\n         return AB.datacollections((d) => myDCs.indexOf(d.id) > -1);\n      },\n   };\n   Designer.application = application;\n   return application;\n}\n","module.exports = [];\n","/* eslint-disable */\nmodule.exports = {\n   /* key : label */\n};\n","//\n// Labels.js\n//\n// The index into our label library.\n\nvar Labels = {};\n// {hash}  { /* language_code : { key: label} */ }\n// all the <lang_code>.js files supported by the AppBuilder\n\nLabels.en = require(\"./en.js\");\n\nmodule.exports = Labels;\n","/*\n * UIProcessParticipant_SelectManagersUI\n *\n * Display the form for entering how to select \"managers\".\n * this form allows you to choose Roles, or Users directly.\n *\n * @return {ClassUI} The Class Definition for this UI widget.\n */\n\nexport default function (AB) {\n   var L = (...params) => {\n      return AB.Multilingual.labelPlugin(\"ABDesigner\", ...params);\n   };\n\n   class UIProcessParticipant_SelectManagersUI extends AB.ClassUI {\n      constructor(id) {\n         super({\n            component: id,\n            form: `${id}_form`,\n            name: `${id}_name`,\n            role: `${id}_role`,\n            useRole: `${id}_useRoles`,\n            useAccount: `${id}_useAccounts`,\n            account: `${id}_account`,\n         });\n      }\n\n      ui(obj = {}) {\n         var __Roles = AB.Account.rolesAll().map((r) => {\n            return { id: r.id, value: r.name };\n         });\n         var __Users = AB.Account.userList().map((u) => {\n            return { id: u.uuid, value: u.username };\n         });\n\n         var ids = this.ids;\n\n         return {\n            id: this.ids.component,\n            type: \"form\",\n            css: \"no-margin\",\n            rows: [\n               {\n                  cols: [\n                     {\n                        view: \"checkbox\",\n                        id: this.ids.useRole,\n                        labelRight: L(\"by Role\"),\n                        labelWidth: 0,\n                        width: 120,\n                        value: obj.useRole == \"1\" ? 1 : 0,\n                        click: function (id /*, event */) {\n                           if ($$(id).getValue()) {\n                              $$(ids.role).enable();\n                           } else {\n                              $$(ids.role).disable();\n                           }\n                        },\n                        on: {\n                           onAfterRender() {\n                              AB.ClassUI.CYPRESS_REF(this);\n                           },\n                        },\n                     },\n                     {\n                        id: this.ids.role,\n                        view: \"multicombo\",\n                        value: obj.role ? obj.role : 0,\n                        disabled: obj.useRole == \"1\" ? false : true,\n                        suggest: {\n                           body: {\n                              data: __Roles,\n                              on: {\n                                 //\n                                 // TODO: looks like a Webix Bug that has us\n                                 // doing all this work.  Let's see if Webix\n                                 // can fix this for us.\n                                 onAfterRender() {\n                                    this.data.each((a) => {\n                                       AB.ClassUI.CYPRESS_REF(\n                                          this.getItemNode(a.id),\n                                          `${ids.role}_${a.id}`\n                                       );\n                                    });\n                                 },\n                                 onItemClick: function (id) {\n                                    var $roleCombo = $$(ids.role);\n                                    var currentItems = $roleCombo.getValue();\n                                    var indOf = currentItems.indexOf(id);\n                                    if (indOf == -1) {\n                                       currentItems.push(id);\n                                    } else {\n                                       currentItems.splice(indOf, 1);\n                                    }\n                                    $roleCombo.setValue(currentItems);\n                                    var item = this.getItem(id);\n                                    AB.ClassUI.CYPRESS_REF(\n                                       this.getItemNode(item.id),\n                                       `${ids.role}_${item.id}`\n                                    );\n                                 },\n                              },\n                           },\n                        },\n                        placeholder: L(\"Click or type to add role...\"),\n                        labelAlign: \"left\",\n                        stringResult: false /* returns data as an array of [id] */,\n                     },\n                  ],\n               },\n               {\n                  cols: [\n                     {\n                        view: \"checkbox\",\n                        id: this.ids.useAccount,\n                        labelRight: L(\"by Account\"),\n                        labelWidth: 0,\n                        width: 120,\n                        value: obj.useAccount == \"1\" ? 1 : 0,\n                        click: function (id /*, event */) {\n                           if ($$(id).getValue()) {\n                              $$(ids.account).enable();\n                           } else {\n                              $$(ids.account).disable();\n                           }\n                        },\n                        on: {\n                           onAfterRender() {\n                              AB.ClassUI.CYPRESS_REF(this);\n                           },\n                        },\n                     },\n                     {\n                        id: this.ids.account,\n                        view: \"multicombo\",\n                        value: obj.account ? obj.account : 0,\n                        disabled: obj.useAccount == \"1\" ? false : true,\n                        suggest: {\n                           body: {\n                              data: __Users,\n                              on: {\n                                 //\n                                 // TODO: looks like a Webix Bug that has us\n                                 // doing all this work.  Let's see if Webix\n                                 // can fix this for us.\n                                 onAfterRender() {\n                                    this.data.each((a) => {\n                                       AB.ClassUI.CYPRESS_REF(\n                                          this.getItemNode(a.id),\n                                          `${ids.account}_${a.id}`\n                                       );\n                                    });\n                                 },\n                                 onItemClick: function (id) {\n                                    var $accountCombo = $$(ids.account);\n                                    var currentItems = $accountCombo.getValue();\n                                    var indOf = currentItems.indexOf(id);\n                                    if (indOf == -1) {\n                                       currentItems.push(id);\n                                    } else {\n                                       currentItems.splice(indOf, 1);\n                                    }\n                                    $accountCombo.setValue(currentItems);\n                                    var item = this.getItem(id);\n                                    AB.ClassUI.CYPRESS_REF(\n                                       this.getItemNode(item.id),\n                                       `${ids.account}_${item.id}`\n                                    );\n                                 },\n                              },\n                           },\n                        },\n                        labelAlign: \"left\",\n                        placeholder: L(\"Click or type to add user...\"),\n                        stringResult: false /* returns data as an array of [id] */,\n                     },\n                  ],\n               },\n            ],\n         };\n      }\n\n      async init(AB) {\n         this.AB = AB;\n\n         return Promise.resolve();\n      }\n\n      // show() {\n      //    super.show();\n      //    AppList.show();\n      // }\n\n      /**\n       * values()\n       * return an object hash representing the values for this component.\n       * @return {json}\n       */\n      values() {\n         var obj = {};\n         var ids = this.ids;\n\n         if ($$(ids.useRole)) {\n            obj.useRole = $$(ids.useRole).getValue();\n         }\n\n         if ($$(ids.role) && obj.useRole) {\n            obj.role = $$(ids.role).getValue();\n            if (obj.role === \"--\") obj.role = null;\n         } else {\n            obj.role = null;\n         }\n\n         if ($$(ids.useAccount)) {\n            obj.useAccount = $$(ids.useAccount).getValue();\n         }\n\n         if ($$(ids.account) && obj.useAccount) {\n            obj.account = $$(ids.account).getValue(/*{ options: true }*/);\n            if (obj.account === \"--\") obj.account = null;\n         } else {\n            obj.account = null;\n         }\n\n         return obj;\n      }\n   }\n\n   return UIProcessParticipant_SelectManagersUI;\n}\n","/*\n * UI\n *\n * The central Controller for the ABDesigner.\n *\n * We switch between allowing a User to Choose an application to work\n * with, and the actual Workspace for an Application.\n */\n\nimport AppChooserFactory from \"./ui_choose.js\";\n// import AppWorkspaceFactory from \"./ui_work.js\";\n\nexport default function (AB) {\n   const AppChooser = AppChooserFactory(AB);\n   // const AppWorkspace = AppWorkspaceFactory(AB);\n\n   class UI extends AB.ClassUI {\n      constructor() {\n         super(\"abd\");\n         this.id = this.ids.component;\n      }\n\n      label() {\n         return AB.Multilingual.labelPlugin(\"ABDesigner\", \"AB Designer\");\n      }\n\n      // return \"popup\" or \"page\"\n      type() {\n         return \"page\";\n      }\n\n      // Return any sub pages.\n      pages() {\n         return [];\n      }\n\n      /* mimic the ABPage.component() */\n      component() {\n         return {\n            ui: this.ui(),\n            init: () => {\n               return this.init(AB);\n            },\n            onShow: () => {\n               /* does anything special need to happen here? */\n               this.show();\n            },\n         };\n      }\n\n      ui() {\n         return {\n            id: this.ids.component,\n            view: \"multiview\",\n            borderless: true,\n            animate: false,\n            // height : 800,\n            rows: [AppChooser.ui() /*, AppWorkspace.ui*/],\n         };\n      }\n\n      async init(AB) {\n         this.AB = AB;\n\n         return Promise.all([\n            AppChooser.init(AB) /*, AppWorkspace.init(AB)*/,\n         ]).then(() => {\n            // Register for ABDefinition Updates\n            return this.AB.Network.post({\n               url: `/definition/register`,\n            }).catch((err) => {\n               if (err?.code == \"E_NOPERM\") {\n                  // ?? What do we do here ??\n                  this.AB.notify.developer(err, {\n                     plugin: \"ABDesigner\",\n                     context: \"ui::init():/definition/register\",\n                     msg: \"User is not able to access /definition/register\",\n                  });\n               }\n            });\n         });\n      }\n\n      /**\n       * isRoot()\n       * indicates this is a RootPage.\n       * @return {bool}\n       */\n      isRoot() {\n         return true;\n      }\n\n      show() {\n         super.show();\n         AppChooser.show();\n      }\n   }\n   return new UI();\n}\n","/*\n * UI Choose\n *\n * Display the initial options of Applications we can work with.\n *\n * When choosing an initial application to work with, we can\n *   - select an application from a list  :  ab_choose_list\n *   - create an application from a form  :  ab_choose_form\n *\n */\n\nimport AB_Choose_List_Factory from \"./ui_choose_list\";\nimport AB_Choose_Form_Factory from \"./ui_choose_form\";\n\nexport default function (AB) {\n   const AppList = AB_Choose_List_Factory(AB);\n   const AppForm = AB_Choose_Form_Factory(AB);\n\n   class UIChoose extends AB.ClassUI {\n      constructor() {\n         super(\"abd_choose\");\n      }\n\n      ui() {\n         return {\n            id: this.ids.component,\n            view: \"multiview\",\n            animate: false,\n            cells: [AppList.ui(), AppForm.ui()],\n         };\n      }\n\n      async init(AB) {\n         this.AB = AB;\n\n         AppList.on(\"view.workplace\", (App) => {\n            console.error(\"TODO: switch to workplace\", App);\n         });\n\n         AppList.on(\"view.form\", () => {\n            AppForm.formReset();\n            AppForm.show();\n         });\n\n         AppList.on(\"edit.form\", (app) => {\n            AppForm.formPopulate(app);\n            AppForm.show();\n         });\n\n         AppForm.on(\"view.list\", () => {\n            AppList.show();\n         });\n         return Promise.all([AppList.init(AB), AppForm.init(AB)]);\n      }\n\n      show() {\n         super.show();\n         AppList.show();\n      }\n   }\n   return new UIChoose();\n}\n","/*\n * AB Choose Form\n *\n * Display the form for creating a new Application.\n *\n */\n\n// const ABComponent = require(\"../classes/platform/ABComponent\");\n// const ABApplication = require(\"../classes/platform/ABApplication\");\nimport ABProcessParticipant_selectManagersUI from \"./forms/process/ABProcessParticipant_selectManagersUI.js\";\n\nexport default function (AB) {\n   const uiConfig = AB.Config.uiSettings();\n   var L = function (...params) {\n      return AB.Multilingual.labelPlugin(\"ABDesigner\", ...params);\n   };\n   const ClassSelectManagersUI = ABProcessParticipant_selectManagersUI(AB);\n\n   class ABChooseForm extends AB.ClassUI {\n      // .extend(idBase, function(App) {\n\n      constructor() {\n         var base = \"abd_choose_form\";\n         super({\n            component: base,\n            warnings: `${base}_warnings`,\n            form: `${base}_form`,\n            appFormPermissionList: `${base}_permission`,\n            appFormCreateRoleButton: `${base}_createRole`,\n\n            saveButton: `${base}_buttonSave`,\n            accessManager: `${base}_accessManager`,\n            accessManagerToolbar: `${base}_accessManagerToolbar`,\n            translationManager: `${base}_translationManager`,\n            translationManagerToolbar: `${base}_translationManagerToolbar`,\n         });\n\n         this.Application = null;\n         // {ABApplication} The current ABApplication being Updated().\n         // Should be null if performing a Create()\n      }\n\n      ui() {\n         this.accessManagerUI = new ClassSelectManagersUI(\"application_amp\");\n         this.translationManagerUI = new ClassSelectManagersUI(\n            \"application_translate\"\n         );\n\n         return {\n            id: this.ids.component,\n            view: \"scrollview\",\n            scroll: \"y\",\n            body: {\n               rows: [\n                  {\n                     responsive: \"hide\",\n                     type: \"space\",\n                     cols: [\n                        {\n                           maxWidth: uiConfig.appListSpacerColMaxWidth,\n                           minWidth: uiConfig.appListSpacerColMinWidth,\n                           width: uiConfig.appListSpacerColMaxWidth,\n                        },\n                        {\n                           responsiveCell: false,\n                           rows: [\n                              {\n                                 maxHeight: uiConfig.appListSpacerRowHeight,\n                                 hidden: uiConfig.hideMobile,\n                              },\n                              {\n                                 view: \"toolbar\",\n                                 css: \"webix_dark\",\n                                 cols: [\n                                    {\n                                       view: \"label\",\n                                       label: L(\"Application Info\"), //labels.component.formHeader,\n                                       fillspace: true,\n                                    },\n                                 ],\n                              },\n                              {\n                                 id: this.ids.warnings,\n                                 view: \"label\",\n                                 label: \"\",\n                              },\n                              {\n                                 view: \"form\",\n                                 id: this.ids.form,\n                                 autoheight: true,\n                                 margin: 0,\n                                 rules: {\n                                    label: (value) => {\n                                       return (\n                                          0 < value.length && value.length <= 20\n                                       );\n                                    },\n                                 },\n                                 elements: [\n                                    {\n                                       name: \"label\",\n                                       view: \"text\",\n                                       label: L(\"Name\"),\n                                       placeholder: L(\"Application name\"),\n                                       invalidMessage: L(\n                                          \"Name must be less than or equal to 20\"\n                                       ),\n                                       labelWidth: 100,\n                                       on: {\n                                          onAfterRender() {\n                                             AB.ClassUI.CYPRESS_REF(\n                                                this,\n                                                \"abd_choose_form_label\"\n                                             );\n                                          },\n                                       },\n                                    },\n                                    { height: uiConfig.smallSpacer },\n                                    {\n                                       name: \"description\",\n                                       view: \"textarea\",\n                                       label: L(\"Description\"),\n                                       labelAlign: \"left\",\n                                       labelWidth: 100,\n                                       placeholder: L(\n                                          \"Application Description\"\n                                       ),\n                                       height: 100,\n                                       on: {\n                                          onAfterRender() {\n                                             AB.ClassUI.CYPRESS_REF(\n                                                this,\n                                                \"abd_choose_form_description\"\n                                             );\n                                          },\n                                       },\n                                    },\n                                    { height: uiConfig.smallSpacer },\n                                    {\n                                       name: \"isSystemObj\",\n                                       view: \"checkbox\",\n                                       labelRight: L(\n                                          \"is this a System Object?\"\n                                       ),\n                                       labelWidth: 0,\n                                       on: {\n                                          onAfterRender() {\n                                             AB.ClassUI.CYPRESS_REF(\n                                                this,\n                                                \"abd_choose_form_isSystemObj\"\n                                             );\n                                          },\n                                       },\n                                    },\n                                    { height: uiConfig.smallSpacer },\n                                    {\n                                       view: \"toolbar\",\n                                       css: \"ab-toolbar-submenu webix_dark\",\n                                       cols: [\n                                          {\n                                             template: L(\n                                                \"Who can use this app?\"\n                                             ),\n                                             type: \"header\",\n                                             borderless: true,\n                                          },\n                                          {},\n                                          // {\n                                          //    view: \"checkbox\",\n                                          //    id: this.ids.appFormCreateRoleButton,\n                                          //    align: \"right\",\n                                          //    labelRight: L(\"Create new role\"),\n                                          //    labelWidth: 0,\n                                          //    width: 150,\n                                          //    on: {\n                                          //       onItemClick: (/* id, e */) => {\n                                          //          this.createRoleButtonClick();\n                                          //       },\n                                          //    },\n                                          // },\n                                       ],\n                                    },\n                                    {\n                                       name: \"permissions\",\n                                       id: this.ids.appFormPermissionList,\n                                       view: \"list\",\n                                       autowidth: true,\n                                       height: 140,\n                                       margin: 0,\n                                       css: \"ab-app-form-permission\",\n                                       template:\n                                          \"{common.markCheckbox()} #name#\",\n                                       type: {\n                                          markCheckbox: function (obj) {\n                                             return `<span class=\"check webix_icon fa fa-fw fa-${\n                                                obj.markCheckbox ? \"check-\" : \"\"\n                                             }square-o\" data-cy=\"check_${\n                                                obj.id\n                                             }\"></span>`;\n\n                                             // (\n                                             //    \"<span class='check webix_icon fa fa-fw fa-\" +\n                                             //    (obj.markCheckbox\n                                             //       ? \"check-\"\n                                             //       : \"\") +\n                                             //    \"square-o' data-cy='check_\"+obj.id+\"'></span>\"\n                                             // );\n                                          },\n                                       },\n                                       on: {\n                                          onAfterRender() {\n                                             this.data.each((a) => {\n                                                AB.ClassUI.CYPRESS_REF(\n                                                   this.getItemNode(a.id),\n                                                   `perm_role_${a.id}`\n                                                );\n                                             });\n                                          },\n                                          onItemClick: (id, e, node) => {\n                                             this.permissionClick(id, e, node);\n                                          },\n                                       },\n                                    },\n                                    { height: uiConfig.smallSpacer },\n                                    {\n                                       name: \"isAccessManaged\",\n                                       view: \"checkbox\",\n                                       labelRight: L(\n                                          \"Enable Page/Tab Access Management\"\n                                       ),\n                                       labelWidth: 0,\n                                       on: {\n                                          onAfterRender() {\n                                             AB.ClassUI.CYPRESS_REF(\n                                                this,\n                                                \"abd_choose_form_isAccessManaged\"\n                                             );\n                                          },\n                                          onChange: (newv /* , oldv */) => {\n                                             if (newv) {\n                                                $$(\n                                                   this.ids.accessManager\n                                                ).show();\n                                                $$(\n                                                   this.ids.accessManagerToolbar\n                                                ).show();\n                                             } else {\n                                                $$(\n                                                   this.ids.accessManager\n                                                ).hide();\n                                                $$(\n                                                   this.ids.accessManagerToolbar\n                                                ).hide();\n                                             }\n                                          },\n                                          onItemClick: (id /*, e */) => {\n                                             var enabled = $$(id).getValue();\n                                             if (enabled) {\n                                                $$(\n                                                   this.ids.accessManager\n                                                ).show();\n                                                $$(\n                                                   this.ids.accessManagerToolbar\n                                                ).show();\n                                             } else {\n                                                $$(\n                                                   this.ids.accessManager\n                                                ).hide();\n                                                $$(\n                                                   this.ids.accessManagerToolbar\n                                                ).hide();\n                                             }\n                                          },\n                                       },\n                                    },\n                                    { height: uiConfig.smallSpacer },\n                                    {\n                                       view: \"toolbar\",\n                                       id: this.ids.accessManagerToolbar,\n                                       css: \"ab-toolbar-submenu webix_dark\",\n                                       hidden:\n                                          parseInt(this.accessManagement) == 1\n                                             ? false\n                                             : true,\n                                       cols: [\n                                          {\n                                             template: L(\n                                                \"Who can manage page/tab access for this app?\"\n                                             ), //labels.component.managerHeader,\n                                             type: \"header\",\n                                             borderless: true,\n                                          },\n                                          {},\n                                       ],\n                                    },\n                                    {\n                                       id: this.ids.accessManager,\n                                       rows: [this.accessManagerUI.ui()],\n                                       paddingY: 10,\n                                       hidden:\n                                          parseInt(this.accessManagement) == 1\n                                             ? false\n                                             : true,\n                                    },\n                                    {\n                                       name: \"isTranslationManaged\",\n                                       view: \"checkbox\",\n                                       labelRight: L(\"Enable Translation Tool\"), // labels.component.enableTranslationManagement,\n                                       labelWidth: 0,\n                                       on: {\n                                          onAfterRender() {\n                                             AB.ClassUI.CYPRESS_REF(\n                                                this,\n                                                \"abd_choose_form_isTranslationManaged\"\n                                             );\n                                          },\n                                          onChange: (newv /*, oldv */) => {\n                                             if (newv) {\n                                                $$(\n                                                   this.ids.translationManager\n                                                ).show();\n                                                $$(\n                                                   this.ids\n                                                      .translationManagerToolbar\n                                                ).show();\n                                             } else {\n                                                $$(\n                                                   this.ids.translationManager\n                                                ).hide();\n                                                $$(\n                                                   this.ids\n                                                      .translationManagerToolbar\n                                                ).hide();\n                                             }\n                                          },\n                                          onItemClick: (id /*, e*/) => {\n                                             var enabled = $$(id).getValue();\n                                             if (enabled) {\n                                                $$(\n                                                   this.ids.translationManager\n                                                ).show();\n                                                $$(\n                                                   this.ids\n                                                      .translationManagerToolbar\n                                                ).show();\n                                             } else {\n                                                $$(\n                                                   this.ids.translationManager\n                                                ).hide();\n                                                $$(\n                                                   this.ids\n                                                      .translationManagerToolbar\n                                                ).hide();\n                                             }\n                                          },\n                                       },\n                                    },\n                                    { height: uiConfig.smallSpacer },\n                                    {\n                                       view: \"toolbar\",\n                                       id: this.ids.translationManagerToolbar,\n                                       css: \"ab-toolbar-submenu webix_dark\",\n                                       hidden:\n                                          parseInt(\n                                             this.translationManagement\n                                          ) == 1\n                                             ? false\n                                             : true,\n                                       cols: [\n                                          {\n                                             template: L(\n                                                \"Who can translate this app?\"\n                                             ),\n                                             type: \"header\",\n                                             borderless: true,\n                                          },\n                                          {},\n                                       ],\n                                    },\n                                    {\n                                       id: this.ids.translationManager,\n                                       rows: [this.translationManagerUI.ui()],\n                                       paddingY: 10,\n                                       hidden:\n                                          parseInt(\n                                             this.translationManagement\n                                          ) == 1\n                                             ? false\n                                             : true,\n                                    },\n                                    { height: uiConfig.smallSpacer },\n                                    {\n                                       margin: 5,\n                                       cols: [\n                                          { fillspace: true },\n                                          {\n                                             view: \"button\",\n                                             value: L(\"Cancel\"),\n                                             width: uiConfig.buttonWidthSmall,\n                                             css: \"ab-cancel-button\",\n                                             click: () => {\n                                                this.cancel();\n                                             },\n                                             on: {\n                                                onAfterRender() {\n                                                   AB.ClassUI.CYPRESS_REF(\n                                                      this,\n                                                      \"abd_choose_form_cancel\"\n                                                   );\n                                                },\n                                             },\n                                          },\n                                          {\n                                             id: this.ids.saveButton,\n                                             view: \"button\",\n                                             css: \"webix_primary\",\n                                             label: L(\"Save\"),\n                                             type: \"form\",\n                                             width: uiConfig.buttonWidthSmall,\n                                             click: () => {\n                                                this.buttonSaveClick();\n                                             }, // end click()\n                                             on: {\n                                                onAfterRender() {\n                                                   AB.ClassUI.CYPRESS_REF(this);\n                                                },\n                                             },\n                                          },\n                                       ],\n                                    },\n                                 ],\n                              },\n                              {\n                                 hidden: uiConfig.hideMobile,\n                              },\n                           ],\n                        },\n                        {\n                           maxWidth: uiConfig.appListSpacerColMaxWidth,\n                           minWidth: uiConfig.appListSpacerColMinWidth,\n                           width: uiConfig.appListSpacerColMaxWidth,\n                        },\n                     ],\n                  },\n               ],\n            },\n         };\n      } // ui()\n\n      init(AB) {\n         this.AB = AB;\n\n         this.$form = $$(this.ids.form);\n\n         webix.extend(this.$form, webix.ProgressBar);\n         webix.extend($$(this.ids.appFormPermissionList), webix.ProgressBar);\n\n         // Make sure we listen for New/Updated Role information\n\n         this.permissionPopulate();\n      }\n\n      toList() {\n         this.emit(\"view.list\");\n      }\n\n      /**\n       * @function applicationCreate\n       *\n       * Step through the process of creating an ABApplication with the\n       * current state of the Form.\n       *\n       * @param {obj} values \tcurrent value hash of the form values.\n       */\n      async applicationCreate(values) {\n         // on a CREATE, make sure .name is set:\n         values.name = values.label;\n\n         // work with a new ABApplication\n         var app = this.AB.applicationNew(values);\n         try {\n            await app.save();\n            webix.message({\n               type: \"success\",\n               text: L(\"{0} successfully created.\", [values.label]),\n            });\n\n            // NOTE: the new App isn't actually stored in AB.applications()\n            // until after the 'ab.abdefinition.created' message is returned\n            // from the Server.\n\n            // TODO: detect if our Network type is REST and then manually\n            // add the Application to the AB factory.\n         } catch (e) {\n            webix.message({\n               type: \"error\",\n               text: L(\"Error creating {0}\", [values.label]),\n            });\n            this.AB.notify.developer(e, {\n               plugin: \"ABDesigner\",\n               context: \"ui_choose_form:applicationCreate()\",\n               values,\n            });\n         }\n      }\n\n      /**\n       * @method applicationUpdate\n       * Step through the process of updating an ABApplication with the\n       * current state of the Form.\n       * @param {ABApplication} application\n       */\n      async applicationUpdate(Application) {\n         var values = this.formValues();\n         // {hash} /key : value\n         // the new values pulled from the form\n\n         var oldVals = {};\n         // {hash} /key : value\n         // a set of the original values to reset to incase of an error saving.\n\n         Object.keys(values).forEach((k) => {\n            oldVals[k] = Application[k];\n            Application[k] = values[k];\n         });\n\n         try {\n            await Application.save();\n            webix.message({\n               type: \"success\",\n               text: L(\"{0} successfully updated.\", [Application.label]),\n            });\n         } catch (e) {\n            webix.message({\n               type: \"error\",\n               text: L(\"Error updating {0}\", [Application.label]),\n            });\n            this.AB.notify.developer(e, {\n               context: \"ui_choose_form:applicationUpdate()\",\n               application: Application.toObj(),\n               values,\n            });\n            // Reset our Application to the original values.\n            Object.keys(oldVals).forEach((k) => {\n               Application[k] = oldVals[k];\n            });\n         }\n\n         // .then(function () {\n         //    next();\n         // })\n         // .catch(next);\n\n         /*\n               async.waterfall(\n                  [\n                     function (next) {\n                        _logic\n                           .permissionSave(Application)\n                           .then(function (result) {\n                              next(null, result);\n                           })\n                           .catch(next);\n                     },\n                     function (app_role, next) {\n                        // Update application data\n                        Application.label = values.label;\n                        Application.description = values.description;\n                        // Application.isAdminApp = values.isAdminApp;\n                        Application.isAccessManaged = values.isAccessManaged;\n                        Application.isTranslationManaged =\n                           values.isTranslationManaged;\n                        Application.accessManagers = accessManagers;\n                        Application.translationManagers = translationManagers;\n\n                        if (app_role && app_role.id)\n                           Application.role = app_role.id;\n                        else Application.role = null;\n\n                        Application.save()\n                           .then(function () {\n                              next();\n                           })\n                           .catch(next);\n                     },\n                  ],\n                  function (err) {\n                     _logic.formReady();\n                     _logic.buttonSaveEnable();\n                     if (err) {\n                        webix.message({\n                           type: \"error\",\n                           text: labels.common.updateErrorMessage.replace(\n                              \"{0}\",\n                              Application.label\n                           ),\n                        });\n                        AD.error.log(\n                           \"App Builder : Error update application data\",\n                           { error: err }\n                        );\n                        return false;\n                     }\n\n                     App.actions.transitionApplicationList();\n\n                     webix.message({\n                        type: \"success\",\n                        text: labels.common.updateSucessMessage.replace(\n                           \"{0}\",\n                           Application.label\n                        ),\n                     });\n                  }\n               );\n*/\n      }\n\n      /**\n       * @function buttonSaveClick\n       * Process the user clicking on the [Save] button.\n       */\n      async buttonSaveClick() {\n         this.buttonSaveDisable();\n         this.formBusy();\n\n         // if there is a selected Application, then this is an UPDATE\n         // var updateApp = App.actions.getSelectedApplication();\n         if (this.Application) {\n            if (this.formValidate(\"update\")) {\n               try {\n                  await this.applicationUpdate(this.Application);\n                  this.toList();\n               } catch (e) {\n                  /* error is handled in .applicationUpdate() */\n               }\n\n               this.formReady();\n               this.buttonSaveEnable();\n            }\n         } else {\n            // else this is a Create\n            if (this.formValidate(\"add\")) {\n               try {\n                  await this.applicationCreate(this.formValues());\n                  this.formReset();\n                  this.toList();\n               } catch (e) {\n                  /* error is handled in .applicationCreate() */\n               }\n               this.formReady();\n               this.buttonSaveEnable();\n            }\n         }\n      }\n\n      /**\n       * @function buttonSaveDisable\n       * Disable the save button.\n       */\n      buttonSaveDisable() {\n         $$(this.ids.saveButton).disable();\n      }\n\n      /**\n       * @function buttonSaveEnable\n       * Re-enable the save button.\n       */\n      buttonSaveEnable() {\n         $$(this.ids.saveButton).enable();\n      }\n\n      /**\n       * @function cancel\n       * Cancel the current Form Operation and return us to the AppList.\n       */\n      cancel() {\n         this.formReset();\n         this.toList();\n         // App.actions.transitionApplicationList();\n      }\n\n      /**\n       * @function createRoleButtonClick\n       *\n       * The user clicked the [Create Role] button.  Update the UI and add a\n       * unique Application permission to our list.\n       */\n      // createRoleButtonClick: function () {\n      //    if ($$(ids.appFormCreateRoleButton).getValue()) {\n      //       // TODO: if not called from anywhere else, then move the name gathering into .permissionAddNew()\n      //       // Add new app role\n      //       var appName = $$(ids.form).elements[\"label\"].getValue();\n      //       _logic.permissionAddNew(appName);\n      //    } else {\n      //       // Remove app role\n      //       _logic.permissionRemoveNew();\n      //    }\n      // },\n\n      /**\n       * @function formBusy\n       *\n       * Show the progress indicator to indicate a Form operation is in\n       * progress.\n       */\n      formBusy() {\n         this.$form.showProgress({ type: \"icon\" });\n      }\n\n      /**\n       * @methoc formPopulate()\n       * populate the form values from the given ABApplication\n       * @param {ABApplication} application  instance of the ABApplication\n       */\n      formPopulate(application) {\n         this.Application = application;\n\n         // Populate data to form\n         if (application) {\n            [\n               \"label\",\n               \"description\",\n               \"isSystemObj\",\n               \"isAccessManaged\",\n               \"isTranslationManaged\",\n            ].forEach((f) => {\n               if (this.$form.elements[f]) {\n                  this.$form.elements[f].setValue(application[f]);\n               }\n            });\n\n            var messages = this.Application.warnings().map((w) => w.message);\n            $$(this.ids.warnings).setValue(messages.join(\"\\n\"));\n\n            // populate access manager ui\n            var $accessManager = $$(this.ids.accessManager);\n            $accessManager.removeView($accessManager.getChildViews()[0]);\n            $accessManager.addView(\n               this.accessManagerUI.ui(application.accessManagers || {}),\n               0\n            );\n\n            // populate translation manager ui\n            var $translationManager = $$(this.ids.translationManager);\n            $translationManager.removeView(\n               $translationManager.getChildViews()[0]\n            );\n            $translationManager.addView(\n               this.translationManagerUI.ui(\n                  application.translationManagers || {}\n               ),\n               0\n            );\n         }\n\n         this.permissionPopulate(application);\n      }\n\n      /**\n       * @function formReady()\n       *\n       * remove the busy indicator from the form.\n       */\n      formReady() {\n         this.$form.hideProgress();\n      }\n\n      /**\n       * @function formReset()\n       *\n       * return the form to an empty state.\n       */\n      formReset() {\n         this.Application = null;\n\n         this.$form.clear();\n         this.$form.clearValidation();\n\n         $$(this.ids.warnings).setValue(\"\");\n\n         this.permissionPopulate(); // leave empty to clear selections.\n\n         $$(this.ids.accessManager).removeView(\n            $$(this.ids.accessManager).getChildViews()[0]\n         );\n         $$(this.ids.translationManager).removeView(\n            $$(this.ids.translationManager).getChildViews()[0]\n         );\n         $$(this.ids.accessManager).addView(this.accessManagerUI.ui(), 0);\n         $$(this.ids.translationManager).addView(\n            this.translationManagerUI.ui(),\n            0\n         );\n      }\n\n      /**\n       * @function formValidate()\n       * validate the form values.\n       * @param {string} op\n       *        The key of the operation we are validating. Can be either\n       *        \"add\", \"update\" or \"destroy\"\n       * @return {bool}\n       *         true if all values pass validation.  false otherwise.\n       */\n      formValidate(op) {\n         // op : ['add', 'update', 'destroy']\n\n         if (!this.$form.validate()) {\n            // TODO : Error message\n\n            this.formReady();\n            this.buttonSaveEnable();\n            return false;\n         }\n\n         var errors = [];\n\n         // TODO: replace with manual checking of Application Name\n         switch (op) {\n            case \"add\":\n               // make sure no other Applications have the same name.\n               var values = this.formValues();\n               values.name = values.label;\n               var mockApp = this.AB.applicationNew(values);\n               var matchingApps = [];\n               (this.AB.applications() || []).forEach((app) => {\n                  // NOTE: .areaKey() uses .name in a formatted way, so\n                  // any matching .areaKey() would be a matching .name\n                  if (app.areaKey() == mockApp.areaKey()) {\n                     matchingApps.push(app);\n                  }\n               });\n               if (matchingApps.length > 0) {\n                  errors.push({\n                     attr: \"label\",\n                     msg: L(\"Name ({0}) is already in use.\", [mockApp.label]),\n                  });\n               }\n               break;\n         }\n\n         if (errors.length > 0) {\n            var hasFocus = false;\n            errors.forEach((e) => {\n               this.$form.markInvalid(e.attr, e.msg);\n               if (!hasFocus) {\n                  this.$form.elements[e.attr].focus();\n                  hasFocus = true;\n               }\n            });\n\n            this.formReady();\n            this.buttonSaveEnable();\n            return false;\n         }\n\n         return true;\n      }\n\n      /**\n       * @function formValues()\n       *\n       * return an object hash of name:value pairs of the current Form.\n       *\n       * @return {obj}\n       */\n      formValues() {\n         // return the current values of the Form elements.\n         var values = this.$form.getValues();\n         values.roleAccess = $$(this.ids.appFormPermissionList).getSelectedId();\n         if (!Array.isArray(values.roleAccess)) {\n            values.roleAccess = [values.roleAccess];\n         }\n         values.accessManagers = this.accessManagerUI.values();\n         values.translationManagers = this.translationManagerUI.values();\n         return values;\n      }\n\n      /**\n       * @function permissionAddNew\n       *\n       * create a new permission entry based upon the current Application.label\n       *\n       * This not only adds it to our Permission List, but also selects it.\n       *\n       * @param {string} appName\tThe Application.label of the current Application\n       */\n      // permissionAddNew: function (appName) {\n      //    // add new role entry\n      //    $$(ids.appFormPermissionList).add(\n      //       {\n      //          id: \"newRole\",\n      //          name: _logic.permissionName(appName),\n      //          isApplicationRole: true,\n      //          markCheckbox: 1,\n      //       },\n      //       0\n      //    );\n\n      //    // Select new role\n      //    var selectedIds = $$(ids.appFormPermissionList).getSelectedId(\n      //       true\n      //    );\n      //    selectedIds.push(\"newRole\");\n      //    $$(ids.appFormPermissionList).select(selectedIds);\n      // },\n\n      /**\n       * @function permissionClick\n       *\n       * Process when a permission entry in the list is clicked.\n       */\n      permissionClick(id /*, e, node*/) {\n         var List = $$(this.ids.appFormPermissionList);\n\n         var item = List.getItem(id);\n\n         if (List.getItem(id).isApplicationRole) {\n            return;\n         }\n\n         if (List.isSelected(id)) {\n            item.markCheckbox = 0;\n            List.unselect(id);\n         } else {\n            item.markCheckbox = 1;\n            var selectedIds = List.getSelectedId();\n\n            if (typeof selectedIds === \"string\" || !isNaN(selectedIds)) {\n               if (selectedIds) selectedIds = [selectedIds];\n               else selectedIds = [];\n            }\n\n            selectedIds.push(id);\n\n            List.select(selectedIds);\n            List.updateItem(id, item);\n         }\n      }\n\n      /**\n       * @function permissionName\n       *\n       * returns a formatted name for a Permission Role based upon the provided Application.label\n       *\n       * @param {string} appName\tthe current value of the Application.label\n       * @return {string} \tPermission Role Name.\n       */\n      // permissionName(appName) {\n      //    return appName + \" Application Role\";\n      // }\n\n      /**\n       * @method permissionPopulate\n       * fill out the Permission list\n       * @param {ABApplication} application\tthe current ABApplication we are editing\n       */\n      permissionPopulate(application) {\n         var PermForm = $$(this.ids.appFormPermissionList);\n         // Get user's roles\n         PermForm.showProgress({ type: \"icon\" });\n\n         var availableRoles = this.AB.Account.rolesAll().map((r) => {\n            return { id: r.id, name: r.name };\n         });\n         if (application) {\n            availableRoles\n               .filter((r) => application.roleAccess.indexOf(r.id) > -1)\n               .map((r) => {\n                  r.markCheckbox = 1;\n               });\n         }\n         PermForm.clearAll();\n         PermForm.parse(availableRoles);\n         var selectedIDs = availableRoles\n            .filter((r) => r.markCheckbox)\n            .map((r) => r.id);\n         PermForm.select(selectedIDs);\n         availableRoles.forEach(function (r) {\n            if (selectedIDs.indexOf(r.id) > -1) {\n               var item = PermForm.getItem(r.id);\n               item.markCheckbox = 1;\n               PermForm.updateItem(r.id, item);\n            }\n         });\n         PermForm.hideProgress();\n      }\n\n      /**\n       * @function permissionRemoveNew()\n       *\n       * Intended to be called when the USER unselects the option to create a Permission\n       * for this Application.\n       *\n       * We remove any Permission Role created for this Application.\n       */\n      // permissionRemoveNew: function () {\n      //    // find any roles that are put here from our application form:\n      //    var appRoles = $$(ids.appFormPermissionList).find(function (\n      //       perm\n      //    ) {\n      //       return perm.isApplicationRole;\n      //    });\n\n      //    // remove them:\n      //    appRoles.forEach(function (r) {\n      //       $$(ids.appFormPermissionList).remove(r.id);\n      //    });\n      // },\n\n      /*\n       * permissionRenameRole\n       *\n       * When the name of the Appliction changes, change the Name of the Permission as well.\n       *\n       * @param {string} newValue  the current name of the application\n       * @param {string} oldValue  the previous name of the application\n       */\n      // permissionRenameRole(newValue, oldValue) {\n      //    var editRole = $$(ids.appFormPermissionList).find(function (d) {\n      //       return d.name === _logic.permissionName(oldValue);\n      //    });\n\n      //    editRole.forEach(function (r) {\n      //       var editItem = $$(ids.appFormPermissionList).getItem(r.id);\n      //       editItem.name = _logic.permissionName(newValue);\n\n      //       $$(ids.appFormPermissionList).updateItem(\n      //          editItem.id,\n      //          editItem\n      //       );\n      //    });\n      // }\n\n      /**\n       * @function permissionSave()\n       *\n       * step through saving the current Permission Settings and associating\n       * them with the current Application.\n       *\n       * @param {ABApplication} App  \tThe current Application we are working with.\n       * @return {Promise}\t\t\t.resolve( {Permission} ) if one is created for this App\n       */\n      // permissionSave(app) {\n      //    debugger;\n      //    //// REFACTOR:\n      //    // this step implies that ab_choose_form understands the intracies of how\n      //    // ABApplication and Permissions work.\n      //    return new Promise((resolve, reject) => {\n      //       var saveRoleTasks = [],\n      //          appRole = null;\n\n      //       //// Process the option to create a newRole For this Application:\n\n      //       // if the button is set\n      //       if ($$(ids.appFormCreateRoleButton).getValue()) {\n      //          // check to see if we already have a permission that isApplicationRole\n      //          var selectedPerms = $$(\n      //             ids.appFormPermissionList\n      //          ).getSelectedItem(true);\n      //          selectedPerms = selectedPerms.filter((perm) => {\n      //             return perm.isApplicationRole;\n      //          });\n\n      //          // if not, then create one:\n      //          if (selectedPerms.length == 0) {\n      //             // Create new role for application\n      //             saveRoleTasks.push(function (cb) {\n      //                app.createPermission()\n      //                   .then(function (result) {\n      //                      // remember the Role we just created\n      //                      appRole = result;\n      //                      cb();\n      //                   })\n      //                   .catch(cb);\n      //             });\n      //          }\n      //       } else {\n      //          // Delete any existing application roles\n      //          saveRoleTasks.push(function (cb) {\n      //             app.deletePermission()\n      //                .then(function () {\n      //                   cb();\n      //                })\n      //                .catch(cb);\n      //          });\n      //       }\n\n      //       //// Now process any additional roles:\n\n      //       // get array of selected permissions that are not our newRole\n      //       var permItems = $$(ids.appFormPermissionList).getSelectedItem(\n      //          true\n      //       );\n      //       permItems = permItems.filter(function (item) {\n      //          return item.id !== \"newRole\";\n      //       }); // Remove new role item\n\n      //       // Make sure Application is linked to selected permission items:\n      //       saveRoleTasks.push(function (cb) {\n      //          // ok, so we removed the 'newRole' entry, but we might\n      //          // have created an entry for it earlier, if so, add in\n      //          // the created one here:\n      //          if (\n      //             $$(ids.appFormCreateRoleButton).getValue() &&\n      //             appRole\n      //          ) {\n      //             // make sure it isn't already in there:\n      //             var appRoleItem = permItems.filter(function (item) {\n      //                return item.id == appRole.id;\n      //             });\n      //             if (!appRoleItem || appRoleItem.length < 1) {\n      //                // if not, add it :\n      //                permItems.push({\n      //                   id: appRole.id,\n      //                   isApplicationRole: true,\n      //                });\n      //             }\n      //          }\n\n      //          // Assign Role Permissions\n      //          app.assignPermissions(permItems)\n      //             .then(function () {\n      //                cb();\n      //             })\n      //             .catch(cb);\n      //       });\n\n      //       async.series(saveRoleTasks, function (err, results) {\n      //          if (err) {\n      //             reject(err);\n      //          } else {\n      //             // we return the instance of the newly created Permission.\n      //             resolve(appRole);\n      //          }\n      //       });\n      //    });\n\n      //    //// REFACTOR QUESTION:\n      //    // why are we updating the app.permissions with this data structure?\n      //    // where is this data structure being used?\n      //    // Earlier we are using another structure (permissionAddNew()) ... how is that related to this?\n\n      //    // // Final task\n      //    // saveRoleTasks.push(function (cb) {\n      //    // \t// Update store app data\n      //    // \tvar applicationData = self.data.filter(function (d) { return d.id == app.id; });\n      //    // \tapplicationData.forEach(function (app) {\n      //    // \t\tapp.attr('permissions', $.map(permItems, function (item) {\n      //    // \t\t\treturn {\n      //    // \t\t\t\tapplication: app.id,\n      //    // \t\t\t\tpermission: item.id,\n      //    // \t\t\t\tisApplicationRole: item.isApplicationRole\n      //    // \t\t\t}\n      //    // \t\t}));\n      //    // \t});\n\n      //    // \tq.resolve(appRole);\n      //    // \tcb();\n      //    // })\n      // }\n\n      /**\n       * @function show()\n       *\n       * Show the Form Component.\n       */\n      show() {\n         $$(this.ids.component).show();\n      }\n\n      /*\n         this.actions({\n            // initiate a request to create a new Application\n            transitionApplicationForm: function (application) {\n               // if no application is given, then this should be a [create] operation,\n\n               // so clear our AppList\n               if (\"undefined\" == typeof application) {\n                  App.actions.unselectApplication();\n               }\n\n               // now prepare our form:\n               _logic.formReset();\n               if (application) {\n                  // populate Form here:\n                  _logic.formPopulate(application);\n               }\n               _logic.permissionPopulate(application);\n               _logic.show();\n            },\n         });\n         */\n   }\n\n   return new ABChooseForm();\n}\n","/*\n * UI Choose List\n *\n * Display a list of Applications we can work with.\n *\n *\n */\n\nimport AB_Choose_List_Menu_Factory from \"./ui_common_popupEditMenu\";\n\nexport default function (AB) {\n   // const AppList = AB_Choose_List_Factory(AB);\n   // const AppForm = AB_Choose_Form_Factory(AB);\n\n   const uiConfig = AB.Config.uiSettings();\n   var L = function (...params) {\n      return AB.Multilingual.labelPlugin(\"ABDesigner\", ...params);\n   };\n\n   const AB_Choose_List_Menu = AB_Choose_List_Menu_Factory(AB);\n\n   class UIChooseList extends AB.ClassUI {\n      constructor() {\n         var base = \"abd_choose_list\";\n         super(base);\n         var baseTB = `${base}_toolbar`;\n\n         var ids = {\n            toolbar: baseTB,\n            buttonCreateNewApplication: `${baseTB}_createnewapp`,\n            uploader: `${baseTB}_uploader`,\n            exporter: `${baseTB}_exporter`,\n            list: `${base}_list`,\n         };\n         Object.keys(ids).forEach((k) => {\n            this.ids[k] = ids[k];\n         });\n      }\n\n      ui() {\n         return {\n            id: this.ids.component,\n            responsive: \"hide\",\n            type: \"space\",\n\n            cols: [\n               {\n                  maxWidth: uiConfig.appListSpacerColMaxWidth,\n                  minWidth: uiConfig.appListSpacerColMinWidth,\n                  width: uiConfig.appListSpacerColMaxWidth,\n               },\n               {\n                  responsiveCell: false,\n                  rows: [\n                     {\n                        maxHeight: uiConfig.appListSpacerRowHeight,\n                        hidden: uiConfig.hideMobile,\n                     },\n                     //\n                     // ToolBar\n                     //\n                     {\n                        view: \"toolbar\",\n                        css: \"webix_dark\",\n                        id: this.ids.toolBar,\n                        cols: [\n                           { view: \"spacer\", width: 10 },\n                           {\n                              view: \"label\",\n                              label: L(\"Applications\"),\n                              fillspace: true,\n                              on: {\n                                 onAfterRender() {\n                                    AB.ClassUI.CYPRESS_REF(this);\n                                 },\n                              },\n                           },\n                           // {\n                           //    view: \"button\",\n                           //    type: \"icon\",\n                           //    label: labels.component.administration,\n                           //    icon: \"fa fa-user\",\n                           //    autowidth: true,\n                           //    css: \"webix_transparent\",\n                           //    click: () => {\n                           //       App.actions.transitionAdministration();\n                           //    },\n                           // },\n\n                           // {\n                           //    view: \"button\",\n                           //    type: \"icon\",\n                           //    label: L(\"Settings\"),\n                           //    icon: \"fa fa-cog\",\n                           //    autowidth: true,\n                           //    css: \"webix_transparent\",\n                           //    click: () => {\n                           //       this.emit(\"view.config\");\n                           //    },\n                           // },\n                           {\n                              id: this.ids.buttonCreateNewApplication,\n                              view: \"button\",\n                              label: L(\"Add new application\"),\n                              autowidth: true,\n                              type: \"icon\",\n                              icon: \"fa fa-plus\",\n                              css: \"webix_transparent\",\n                              click: () => {\n                                 // Inform our Chooser we have a request to create an Application:\n                                 this.emit(\"view.form\", null); // leave null for CREATE\n                              },\n                              on: {\n                                 onAfterRender() {\n                                    AB.ClassUI.CYPRESS_REF(this);\n                                 },\n                              },\n                           },\n                           {\n                              view: \"uploader\",\n                              id: this.ids.uploader,\n                              label: L(\"Import\"),\n                              autowidth: true,\n                              upload: \"/definition/import\",\n                              multiple: false,\n                              type: \"icon\",\n                              icon: \"fa fa-upload no-margin\",\n                              autosend: true,\n                              css: \"webix_transparent\",\n                              on: {\n                                 onAfterFileAdd: () => {\n                                    $$(this.ids.uploader).disable();\n                                 },\n                                 onFileUpload: (/*item, response */) => {\n                                    // the file upload process has finished\n                                    // reload the page:\n                                    window.location.reload();\n                                    return false;\n                                 },\n                                 onFileUploadError: (\n                                    details /*, response */\n                                 ) => {\n                                    // {obj} details\n                                    //   .file : {obj} file details hash\n                                    //   .name : {string} filename\n                                    //   .size : {int} file size\n                                    //   .status : {string} \"error\"\n                                    //   .xhr :  {XHR Object}\n                                    //      .responseText\n                                    //      .status : {int}  404\n                                    //      .statusText : {string}\n\n                                    this.AB.notify.developer(\n                                       \"Error uploading file\",\n                                       {\n                                          url: details.xhr.responseURL,\n                                          status: details.status,\n                                          code: details.xhr.status,\n                                          response: details.xhr.responseText,\n                                       }\n                                    );\n                                    $$(this.ids.uploader).enable();\n                                    return false;\n                                 },\n                                 onAfterRender() {\n                                    AB.ClassUI.CYPRESS_REF(this);\n                                 },\n                              },\n                           },\n\n                           {\n                              view: \"button\",\n                              id: this.ids.exporter,\n                              label: L(\"Export All\"), // labels.common.export,\n                              autowidth: true,\n                              type: \"icon\",\n                              icon: \"fa fa-download\",\n                              css: \"webix_transparent\",\n                              click: function () {\n                                 window.location.assign(\n                                    \"/definition/export/all?download=1\"\n                                 );\n                              },\n                              on: {\n                                 onAfterRender() {\n                                    AB.ClassUI.CYPRESS_REF(this);\n                                 },\n                              },\n                           },\n                        ],\n                     },\n\n                     //\n                     // The List of Applications\n                     //\n                     {\n                        id: this.ids.list,\n                        view: \"list\",\n                        css: \"ab-app-select-list\",\n                        template: (obj, common) => {\n                           return this.templateListItem(obj, common);\n                        },\n                        type: {\n                           height: uiConfig.appListRowHeight, // Defines item height\n                           iconGear: function (app) {\n                              return `<span class=\"webix_icon fa fa-cog\" data-cy=\"edit_${app.id}\"></span>`;\n                           },\n                           iconAdmin: function (app) {\n                              return app.isAdminApp\n                                 ? \"<span class='webix_icon fa fa-circle-o-notch'></span> \"\n                                 : \"\";\n                           },\n                        },\n                        select: false,\n                        onClick: {\n                           \"ab-app-list-item\": (ev, id, trg) => {\n                              return this.onClickListItem(ev, id, trg);\n                           },\n                           \"ab-app-list-edit\": (ev, id, trg) => {\n                              return this.onClickListEdit(ev, id, trg);\n                           },\n                        },\n                        onHover: {},\n                        on: {\n                           onAfterRender() {\n                              this.data.each((a) => {\n                                 AB.ClassUI.CYPRESS_REF(\n                                    this.getItemNode(a.id),\n                                    a.id\n                                 );\n                              });\n                           },\n                        },\n                     },\n                     {\n                        maxHeight: uiConfig.appListSpacerRowHeight,\n                        hidden: uiConfig.hideMobile,\n                     },\n                  ],\n               },\n               {\n                  maxWidth: uiConfig.appListSpacerColMaxWidth,\n                  minWidth: uiConfig.appListSpacerColMinWidth,\n                  width: uiConfig.appListSpacerColMaxWidth,\n               },\n            ],\n         };\n      }\n\n      async init(AB) {\n         this.AB = AB;\n\n         this.$list = $$(this.ids.list);\n         // {webix.list}  The webix component that manages our Application List\n\n         webix.extend(this.$list, webix.ProgressBar);\n         webix.extend(this.$list, webix.OverlayBox);\n\n         // Setup our popup Editor Menu for our Applications\n         this.MenuComponent = new AB_Choose_List_Menu(this.ids.component);\n         this.MenuComponent.init(AB);\n         var options = [\n            {\n               label: L(\"Edit\"), //labels.common.edit,\n               icon: \"fa fa-pencil-square-o\",\n               command: \"edit\",\n            },\n            {\n               label: L(\"Export\"), //labels.common.export,\n               icon: \"fa fa-download\",\n               command: \"export\",\n            },\n            {\n               label: L(\"Delete\"), // labels.common.delete,\n               icon: \"fa fa-trash\",\n               command: \"delete\",\n            },\n         ];\n         this.MenuComponent.menuOptions(options);\n         this.MenuComponent.on(\"click\", (action) => {\n            var selectedApp = this.$list.getSelectedItem();\n\n            switch (action) {\n               case \"edit\":\n                  this.emit(\"edit.form\", selectedApp);\n                  break;\n\n               case \"delete\":\n                  webix.confirm({\n                     title: L(\"Delete {0}?\", [L(\"Application\")]),\n                     text: L(\"Do you want to delete <b>{0}</b>?\", [\n                        selectedApp.label,\n                     ]),\n                     ok: L(\"Yes\"),\n                     cancel: L(\"No\"),\n                     callback: async (result) => {\n                        if (!result) return;\n\n                        this.busy();\n                        try {\n                           await selectedApp.destroy();\n                           this.refreshList();\n                           webix.message({\n                              type: \"success\",\n                              text: L(\"{0} successfully deleted.\", [\n                                 selectedApp.label,\n                              ]),\n                           });\n                        } catch (e) {\n                           webix.message({\n                              type: \"error\",\n                              text: L(\"There was an error deleting {0}.\", [\n                                 selectedApp.label,\n                              ]),\n                           });\n                        }\n                        this.ready();\n                     },\n                  });\n                  break;\n\n               case \"export\":\n                  // Download the JSON file to disk\n                  window.location.assign(\n                     `/definition/export/${selectedApp.id}?download=1`\n                  );\n                  break;\n            }\n         });\n\n         // listen for the AllApplications response:\n         this.AB.Network.on(\n            \"definitions.allapplications\",\n            (context, err, allDefinitions) => {\n               this.ready();\n               if (err) {\n                  // log the error\n                  this.AB.notify.developer(err, {\n                     plugin: \"ABDesigner\",\n                     context:\n                        \"ui_choose_list:init(): /definition/allapplications\",\n                  });\n                  context?.reject?.(err);\n                  return;\n               }\n\n               this.AB.definitionsParse(allDefinitions);\n\n               context?.resolve?.();\n            }\n         );\n\n         // return Promise.all([AppList.init(AB) /*, AppForm.init(AB)*/]);\n         return this.loadAllApps().then(() => {\n            // NOTE: .loadAllApps() will generate a TON of \"definition.updated\"\n            // events.  So add these handlers after that is all over.\n\n            // Refresh our Application List each time we are notified of a change\n            // in our Application definitions:\n            var handler = async (def) => {\n               if (def.type == \"application\") {\n                  this.loaded = false;\n                  await this.loadData();\n                  this.refreshList();\n               }\n            };\n            [\n               \"definition.created\",\n               \"definition.updated\",\n               \"definition.deleted\",\n            ].forEach((e) => {\n               this.AB.on(e, handler);\n            });\n         });\n      }\n\n      //\n      // Logic Methods\n      //\n\n      busy() {\n         this.$list.disable();\n         if (this.$list.showProgress) this.$list.showProgress({ type: \"icon\" });\n      }\n\n      /**\n       * @method loadAllApps();\n       * specifically call for loading all the available ABApplications so that a\n       * builder can work with them.\n       * @return {Promise}\n       */\n      async loadAllApps() {\n         if (!this._loadInProgress) {\n            this.busy();\n            this._loadInProgress = new Promise((resolve, reject) => {\n               var jobResponse = {\n                  key: \"definitions.allapplications\",\n                  context: { resolve, reject },\n               };\n\n               this.AB.Network.get(\n                  {\n                     url: `/definition/allapplications`,\n                  },\n                  jobResponse\n               );\n            });\n         }\n\n         return this._loadInProgress;\n      }\n\n      /**\n       * @function loadData\n       *\n       * Load all the ABApplications and display them in our App List\n       */\n      async loadData() {\n         await this.loadAllApps();\n\n         if (this.loaded) return;\n\n         this.loaded = true;\n\n         // Get applications data from the server\n         this.busy();\n\n         // User needs Access To Role (System Designer) in order to see\n         // app.isSystemObj ABApplications.\n         var f = (app) => !app.isSystemObj;\n\n         if (this.AB.Account.isSystemDesigner()) {\n            f = () => true;\n         }\n         var allApps = this.AB.applications(f);\n         this.dcEditableApplications = new webix.DataCollection({\n            data: allApps || [],\n         });\n         // {webix.DataCollection} dcEditableApplications\n         // a list of all our applications we are able to edit.\n\n         this.dcEditableApplications.attachEvent(\n            \"onAfterAdd\",\n            (/* id, index */) => {\n               this.refreshOverlay();\n            }\n         );\n\n         this.dcEditableApplications.attachEvent(\n            \"onAfterDelete\",\n            (/* id */) => {\n               this.refreshOverlay();\n            }\n         );\n\n         // // TODO: we should track the order in the List and save as\n         // // .sortOrder ... or .local.sortOrder\n         // this.dcEditableApplications.sort(\"label\");\n         // moved to .refreshList()\n\n         this.refreshList();\n         this.ready();\n      }\n\n      /**\n       * @function onClickListEdit\n       * UI updates for when the edit gear is clicked\n       */\n      onClickListEdit(ev, id, trg) {\n         // Show menu\n         this.MenuComponent.show(trg);\n         this.$list.select(id);\n\n         return false; // block default behavior\n      }\n\n      /**\n       * @method onClickListItem\n       * An item in the list is selected. So update the workspace with that\n       * object.\n       */\n      onClickListItem(ev, id /*, trg */) {\n         this.$list.select(id);\n         let selectedApp = this.$list.getItem(id);\n         if (selectedApp) {\n            // set the common App so it is accessible for all the Applications views\n            selectedApp.App = this.AB.App;\n\n            // We've selected an Application to work with\n            this.emit(\"transition.workplace\", selectedApp);\n         }\n         return false; // block default behavior\n      }\n\n      /**\n       * @method ready\n       * remove the busy indicator on our App List\n       */\n      ready() {\n         this.$list.enable();\n         if (this.$list.hideProgress) this.$list.hideProgress();\n      }\n\n      /**\n       * @method refreshList\n       * Apply our list of ABApplication data to our AppList\n       */\n      refreshList() {\n         this.$list.clearAll();\n         this.$list.data.unsync();\n         this.$list.data.sync(this.dcEditableApplications);\n         this.$list.sort(\"label\", \"asc\");\n         this.refreshOverlay();\n         this.$list.refresh();\n         this.ready();\n      }\n\n      /**\n       * @method refreshOverlay\n       * If we have no items in our list, display a Message.\n       */\n      refreshOverlay() {\n         if (!this.$list.count())\n            this.$list.showOverlay(L(\"There is no application data\"));\n         else this.$list.hideOverlay();\n      }\n\n      /**\n       * @method show\n       * Trigger our List component to show\n       */\n      show() {\n         super.show();\n\n         // start things off by loading the current list of Applications\n         this.loadData();\n      }\n\n      templateListItem(obj, common) {\n         // JAMES: here are the warning interface:\n         // obj.warnings() : Returns the warning for this specific object (Application)\n         //       {array} [  { message, data } ]\n         //             message: {string} A description of the warning\n         //             data: {obj} An object holding related data values.\n         //\n         // obj.warningsAll(): Like .warnings() but will return the warnings of\n         //    this object and any of it's sub objects.\n         //\n         //\n         var numWarnings = (obj.warningsAll() || []).length;\n         return `<div class='ab-app-list-item'>\n   <div class='ab-app-list-info'>\n      <div class='ab-app-list-name'>${common.iconAdmin(obj)}${\n            obj.label ?? \"\"\n         }(${numWarnings})</div>\n      <div class='ab-app-list-description'>${obj.description ?? \"\"}</div>\n   </div>\n   <div class='ab-app-list-edit'>\n      ${common.iconGear(obj)}\n   </div>\n</div>`;\n      }\n   }\n   return new UIChooseList();\n}\n","/*\n * ab_common_popupEditMenu\n *\n * Many of our Lists offer a gear icon that allows a popup menu to select\n * a set of options for this entry.  This is a common Popup Editor for those\n * options.\n *\n */\n\nexport default function (AB) {\n   var L = function (...params) {\n      return AB.Multilingual.labelPlugin(\"ABDesigner\", ...params);\n   };\n\n   class ABCommonPopupEditMenu extends AB.ClassUI {\n      constructor(contextID) {\n         var idBase = \"abd_common_popupEditMenu\";\n         super(idBase);\n\n         // var labels = {\n         //    common: App.labels,\n\n         //    component: {\n         //       copy: L(\"ab.page.copy\", \"*Copy\"),\n         //       exclude: L(\"ab.object.exclude\", \"*Exclude\"),\n\n         //       menu: L(\"ab.application.menu\", \"*Application Menu\"),\n         //       confirmDeleteTitle: L(\n         //          \"ab.application.delete.title\",\n         //          \"*Delete application\"\n         //       ),\n         //       confirmDeleteMessage: L(\n         //          \"ab.application.delete.message\",\n         //          \"*Do you want to delete <b>{0}</b>?\"\n         //       )\n         //    }\n         // };\n\n         // since multiple instances of this component can exists, we need to\n         // make each instance have unique ids => so add webix.uid() to them:\n         // var uid = webix.uid();\n         // var ids = {\n         //    menu: this.unique(\"menu\") + uid,\n         //    list: this.unique(\"list\") + uid\n         // };\n\n         this.ids.menu = `${idBase}_menu_${contextID}`;\n         this.ids.list = `${idBase}_list_${contextID}`;\n\n         this.Popup = null;\n         this._menuOptions = [\n            {\n               label: L(\"Rename\"),\n               icon: \"fa fa-pencil-square-o\",\n               command: \"rename\",\n            },\n            {\n               label: L(\"Copy\"),\n               icon: \"fa fa-files-o\",\n               command: \"copy\",\n            },\n            {\n               label: L(\"Exclude\"),\n               icon: \"fa fa-reply\",\n               command: \"exclude\",\n            },\n            {\n               label: L(\"Delete\"),\n               icon: \"fa fa-trash\",\n               command: \"delete\",\n            },\n         ];\n      }\n\n      ui() {\n         return {\n            view: \"popup\",\n            id: this.ids.menu,\n            head: L(\"Application Menu\"), // labels.component.menu,\n            width: 120,\n            body: {\n               view: \"list\",\n               id: this.ids.list,\n               borderless: true,\n               data: [],\n               datatype: \"json\",\n               template: \"<i class='fa #icon#' aria-hidden='true'></i> #label#\",\n               autoheight: true,\n               select: false,\n               on: {\n                  onItemClick: (timestamp, e, trg) => {\n                     return this.onItemClick(trg);\n                  },\n               },\n            },\n         };\n      }\n\n      async init(AB, options) {\n         options = options || {};\n\n         if (this.Popup == null) this.Popup = webix.ui(this.ui()); // the current instance of this editor.\n\n         // we reference $$(this.ids.list) alot:\n         this.$list = $$(this.ids.list);\n\n         this.hide();\n         this.menuOptions(this._menuOptions);\n\n         // register our callbacks:\n         // for (var c in _logic.callbacks) {\n         //    if (options && options[c]) {\n         //       _logic.callbacks[c] = options[c] || _logic.callbacks[c];\n         //    }\n         // }\n\n         // hide \"copy\" item\n         if (options.hideCopy) {\n            let itemCopy = this.$list.data.find(\n               (item) => item.label == labels.component.copy\n            )[0];\n            if (itemCopy) {\n               this.$list.remove(itemCopy.id);\n               this.$list.refresh();\n            }\n         }\n\n         // hide \"exclude\" item\n         if (options.hideExclude) {\n            let hideExclude = this.$list.data.find(\n               (item) => item.label == labels.component.exclude\n            )[0];\n            if (hideExclude) {\n               this.$list.remove(hideExclude.id);\n               this.$list.refresh();\n            }\n         }\n      }\n\n      /**\n       * @function menuOptions\n       * override the set of menu options.\n       * @param {array} menuOptions an array of option entries:\n       *\t\t\t\t  .label {string} multilingual label of the option\n       *\t\t\t\t  .icon  {string} the font awesome icon reference\n       *\t\t\t\t  .command {string} the command passed back when selected.\n       */\n      menuOptions(menuOptions) {\n         this.$list.clearAll();\n\n         this._menuOptions = menuOptions;\n         var data = [];\n         menuOptions.forEach((mo) => {\n            data.push({ label: mo.label, icon: mo.icon });\n         });\n         this.$list.parse(data);\n         this.$list.refresh();\n      }\n\n      /**\n       * @function onItemClick\n       * process which item in our popup was selected.\n       */\n      onItemClick(itemNode) {\n         // hide our popup before we trigger any other possible UI animation: (like .edit)\n         // NOTE: if the UI is animating another component, and we do .hide()\n         // while it is in progress, the UI will glitch and give the user whiplash.\n\n         var label = itemNode.textContent.trim();\n         var option = this._menuOptions.filter((mo) => {\n            return mo.label == label;\n         })[0];\n         if (option) {\n            // this._logic.callbacks.onClick(option.command);\n            this.emit(\"click\", option.command);\n         }\n\n         this.hide();\n         return false;\n      }\n\n      show(itemNode) {\n         if (this.Popup && itemNode) this.Popup.show(itemNode);\n      }\n\n      hide() {\n         if (this.Popup) this.Popup.hide();\n      }\n   }\n\n   // NOTE: return JUST the class definition.\n   return ABCommonPopupEditMenu;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import definitions from \"./src/definitions.js\";\nimport ApplicationFactory from \"./src/application.js\";\nimport Labels from \"./src/labels/labels.js\";\n\nif (window.__ABBS) {\n   window.__ABBS.addPlugin({\n      version: \"0.0.0\",\n      key: \"ABDesigner\",\n      apply: function (AB) {\n         // At this point, the Plugin should already have loaded all it's definitions\n         // into the AB Factory\n         AB.pluginLoad(ApplicationFactory(AB));\n\n         // var labels = Labels.en; /* default */;\n         // var lang =AB.Multilingual.currentLanguage();\n\n         // if (Labels[lang]) {\n         //    labels = Labels[lang];\n         // }\n         // AB.pluginLabelLoad(\"ABDesigner\", labels);\n      },\n      definitions: function () {\n         return definitions;\n      },\n      labels: function (lang) {\n         return Labels[lang] || Labels.en;\n      },\n   });\n}\n"],"names":[],"sourceRoot":""}